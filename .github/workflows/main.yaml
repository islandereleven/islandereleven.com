name: Terraform CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  TF_VERSION: '1.8.5'
  AWS_REGION: 'eu-central-1'

jobs:
  # This job finds all the directories and creates the matrix
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - id: set-matrix
        name: Find Terraform Directories
        run: |
          # Finds directories with .tf files, excludes .terraform and module dirs, formats as JSON
          TF_DIRS=$(find infrastructure -mindepth 1 -type f -name '*.tf' -printf '%h\n' | sort -u | grep -vE '(\.terraform|/module)$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "matrix=$TF_DIRS" >> $GITHUB_OUTPUT

  # This job runs Terraform on the directories found by the setup-matrix job
  terraform:
    needs: setup-matrix
    name: 'Terraform Plan/Apply on ${{ matrix.tf_dir }}'
    runs-on: ubuntu-latest
    environment: aws

    strategy:
      # The matrix is now dynamically populated from the previous job
      matrix:
        tf_dir: ${{ fromJSON(needs.setup-matrix.outputs.matrix) }}

    defaults:
      run:
        working-directory: ${{ matrix.tf_dir }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Plan
        id: plan
        run: terraform plan -input=false -no-color -out=tfplan

      - name: Generate Sanitized Artifact Name
        id: sanitize
        run: |
          echo "ARTIFACT_NAME=tfplan-$(echo ${{ matrix.tf_dir }} | sed 's/\//-/g')" >> $GITHUB_ENV

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.ARTIFACT_NAME }}
          path: ${{ matrix.tf_dir }}/tfplan

      - name: Terraform Apply (Main Branch Only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -input=false -auto-approve tfplan